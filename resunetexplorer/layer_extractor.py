from resunetexplorer.utils import get_submodule_str, get_submodule, get_output_shape, get_number_maps, model_up_to

class ExtractResUNetLayers:
    """Layers extractor class for PyTorch ResUNet.

        Receives the model from which attributes such as layer structure and feature maps number will be extracted.

        Parameters
        ----------
        model : Pytorch model           

    """

    def __init__(self, model):
        
        self.model = model

    
    def get_layers(self, layers_paths: list):
        """

        Parameters
        ----------
        layers_paths : list
            Contains the paths to the layers.
            e.g. ['encoder.resblock1', 'encoder.resblock2', ...]
        
        Returns
        ----------
        layers_dict: dict
          A dictionary containing the following keys 
            * 'layer': list of str
              The layer struct from model, in other words the model submodule	
            * 'n_maps': list of int
              The number of feature maps generated by respective layer. 
            * 'layer_path' : list of strings
              Contains the paths to respective layers e.g. ['encoder.resblock1', 'encoder.resblock2', ...]
        """
        layers_dict = {
            "layer_path": [],
            "n_maps": [],
            "layer": [],

        }

        for i, path in enumerate(layers_paths):
            # Get desired layer from model
            layer = get_submodule(self.model, path)
            
            n_maps = get_number_maps(self.model, layer)
            # Dict appending
            layers_dict["layer_path"].append(path)
            layers_dict["n_maps"].append(n_maps)
            layers_dict["layer"].append(layer)

        return layers_dict     